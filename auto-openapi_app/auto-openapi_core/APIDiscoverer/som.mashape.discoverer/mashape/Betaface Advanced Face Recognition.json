{"swagger":"2.0","info":{"title":"Betaface Advanced Face Recognition","description":"Advanced face detection, face recognition and face analysis API","contact":{"name":"betaface","url":"http://betafaceapi.com"},"version":null,"x-logo":"https://s3.amazonaws.com/mashape-production-logos/apis/53aa5333e4b0f2c9754704ba_medium","x-mashape-categories":["Media"],"x-origin":{"format":"mashape","url":"https://market.mashape.com/betaface/betaface-advanced-face-recognition"}},"host":"betaface.p.mashape.com","basePath":"","paths":{"/GetFaceImage":{"post":{"description":"This function returns cropped face JPEG image","operationId":"getfaceimage","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/GetImageFileInfo":{"post":{"description":"This function will return image metadata, including faces or processing status of the image. If image is not yet processed GetImageInfo return \"int_response\": 1, which means image is still in the queue. If image was processed function return \"int_response\": 0 (ok) and you can parse the rest of the response. img_checksum: is SHA-256 checkusm of the image file (http://en.wikipedia.org/wiki/SHA-2) that can be calculated without uploading image to webservice and also returned by GetImageInfo function. You can use this function to retrieve cached image information of already processed image without uploading it again.","operationId":"getimagefileinfo","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/GetImageInfo":{"post":{"description":"This function will return image metadata, including faces or processing status of the image. If image is not yet processed GetImageInfo return \"int_response\": 1, which means image is still in the queue. If image was processed function return \"int_response\": 0 (ok) and you can parse the rest of the response. img_uid: is image ID returned by one of Upload functions","operationId":"getimageinfo","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/GetRecognizeResult":{"post":{"description":"This function return results of recognition task or recognition request state. If recognition request is not yet processed GetRecognizeResult will return \"int_response\": 1, which means request is still in the queue. Keep calling GetRecognizeResult every 0.5-1 seconds until you get \"int_response\" not equal 1. If request was processed, integer result will be 0 (ok) and you can parse the rest of the response.  In the result you will get separate FaceRecognizeInfo structure for each face ID you specified in the first list in Faces_Recognize function. !!To test the method insert in recognize_uid UID returned by previous Faces_Recognize call","operationId":"getrecognizeresult","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/GetTransformResult":{"post":{"description":"","operationId":"gettransformresult","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/RecognizeFaces":{"post":{"description":"This function is a main entry to execute similar persons search, identification and verification tasks. As with faces detection, you first place recognition request with Faces_Recognize function in the queue, and then keep polling GetRecognizeResult function until you get the result. Function accept two arrays: first list - array of faces (face IDs) you wish to analyze (compare with other faces, identify person, verify is it a specific person). Usually you have one Face ID in this array. second list - array of targets which should be used for comparison. Targets can be individual face IDs, full person names (personname@namespace) or complete namespaces (all@namespace).","operationId":"recognizefaces","consumes":["application/json"]}},"/SetPerson":{"post":{"description":"This function allow you to group multiple face images under one person name and optionally assign this person to specific namespace. Later you can instead of comparing new face image with selected face images from database, compare new face image with selected persons from database, or with all persons within specific namespace.  Person names and namespace names should contain only letters, spaces, numbers and symbol '.'. Symbol '@' should separate person name from namespace. When you assign person to namespace, if namespace does not exists, it will be created. If no namespace is provided, face will be assigned to default namespace with an empty name. Person with the same name but different namespace considered to be different person. Each face (unique face ID) can have only one person assigned to it. To remove specific face from person faces collection simply assign it again to a different person or assign it to an empty string.","operationId":"setperson","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/TransformFaces":{"post":{"description":"","operationId":"transformfaces","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}},"/UploadImage":{"post":{"description":"Upload binary image file or url for processing","operationId":"uploadimage","consumes":["application/json"],"produces":["application/json"],"responses":{"200":{"description":null,"schema":"#/definitions/Resource"}}}}},"definitions":{"Resource":{"type":"object","properties":{"int_response":{"type":"integer"},"string_response":{"type":"string"},"face_image":{"type":"array","items":{"type":"integer"}},"uid":{"type":"string"},"face_info":{"$ref":"#/definitions/Face_info"}}},"Face_info":{"type":"object","properties":{"age":{"type":"integer"},"age_confidence":{"type":"integer"},"angle":{"type":"integer"},"beard_confidence":{"type":"integer"},"ethincity":{"type":"string"},"ethincity_confidence":{"type":"integer"},"gender":{"type":"string"},"gender_confidence":{"type":"integer"},"glasses_confidence":{"type":"integer"},"height":{"type":"integer"},"image_uid":{"type":"string"},"mask_areas":{"type":"string"},"measurements":{"type":"string"},"mustache_confidence":{"type":"integer"},"score":{"type":"integer"},"smile_confidence":{"type":"integer"},"tags":{"type":"string"},"uid":{"type":"string"},"user_points":{"type":"string"},"width":{"type":"integer"},"x":{"type":"integer"},"y":{"type":"integer"},"classifiers":{"type":"array","items":{"$ref":"#/definitions/Classifier"}},"points":{"type":"array","items":{"$ref":"#/definitions/Point"}}}},"Classifier":{"type":"object","properties":{"confidence":{"type":"integer"},"name":{"type":"string"},"value":{"type":"string"}}},"Point":{"type":"object","properties":{"type":{"type":"integer"},"x":{"type":"integer"},"y":{"type":"integer"}}},"Resource_0":{"type":"object"}}}